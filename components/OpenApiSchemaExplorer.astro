---
import spec from 'virtual:starlight-openapi-navigator/spec-data';
import { Code } from '@astrojs/starlight/components';
import AnchorHeading from '@astrojs/starlight/components/AnchorHeading.astro';
import SchemaNode from './OpenApiSchemaNode.astro';

const schemas = Array.isArray(spec.schemas) ? spec.schemas : [];
const slugMap = new Map(schemas.map((schema) => [schema.name, schema.slug]));

const normalizeTypeClass = (value) => {
  if (typeof value !== 'string' || !value) return 'any';
  return value.toLowerCase().replace(/[^a-z0-9]+/g, '-');
};

const inferSchemaType = (schemaNode) => {
  if (!schemaNode || typeof schemaNode !== 'object') return 'any';
  if (typeof schemaNode.type === 'string' && schemaNode.type) return schemaNode.type;
  if (schemaNode.properties) return 'object';
  if (schemaNode.items) return 'array';
  if (schemaNode.enum) return 'enum';
  return 'any';
};

const getRootMeta = (schemaNode) => {
  const type = inferSchemaType(schemaNode);
  const format = typeof schemaNode?.format === 'string' ? schemaNode.format : '';
  const label = format ? `${type} (${format})` : type;
  const className = `schema-node__type schema-node__type--${normalizeTypeClass(type)}`;
  return {
    className,
    label: label || 'any',
  };
};

const toJson = (schema) => {
  try {
    return JSON.stringify(schema, null, 2);
  } catch {
    return '';
  }
};
---

<div class="schema-explorer">
  <div class="schema-explorer__intro">
    <p>These component schemas define the structure of responses and reusable objects in the OpenAPI document. Expand a schema to inspect its JSON shape.</p>
  </div>

  {schemas.length === 0 ? (
    <p>No component schemas were found in the bundled specification.</p>
  ) : (
    <div class="schema-explorer__grid">
      <div class="schema-explorer__content">
        {schemas.map((schema) => {
          const rootMeta = getRootMeta(schema.schema);
          return (
            <article class="schema-explorer__schema" data-schema-panel data-schema-slug={schema.slug}>
              <details class="schema-explorer__panel" data-schema-primary>
                <summary class="schema-explorer__panel-summary">
                  <AnchorHeading level="2" id={schema.slug} class="schema-explorer__panel-heading">
                    {schema.name}
                  </AnchorHeading>
                  <span class={rootMeta.className}>{rootMeta.label}</span>
                  <button
                    type="button"
                    class="schema-explorer__expand-button"
                    data-schema-expand
                    aria-label="Expand all schema fields"
                    aria-pressed="false"
                    data-state="collapsed"
                  ></button>
                </summary>
                <div class="schema-explorer__panel-content">
                  {schema.description && <p class="schema-explorer__description">{schema.description}</p>}
                  <ul class="schema-tree">
                    <SchemaNode name={null} schema={schema.schema} depth={0} slugMap={slugMap} />
                  </ul>
                </div>
              </details>
              <details class="schema-raw">
                <summary>View raw schema JSON</summary>
                <Code lang="json" code={toJson(schema.schema)} />
              </details>
            </article>
          );
        })}
      </div>
    </div>
  )}
</div>

<style scoped>
.schema-explorer {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.schema-explorer__grid {
  display: grid;
  gap: 2rem;
  grid-template-columns: minmax(12rem, 40rem) 1fr;
}

.schema-explorer__toc {
  position: sticky;
  top: calc(var(--sl-nav-height) + 1rem);
  align-self: start;
}

.schema-explorer__toc ol {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.schema-explorer__toc a {
  color: var(--color-muted-fg);
  text-decoration: none;
}

.schema-explorer__toc a:hover {
  color: var(--color-primary);
}

.schema-explorer__schema {
  border: 1px solid var(--color-border);
  border-radius: 0.75rem;
  background: var(--color-bg-muted, var(--color-bg));
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.schema-explorer__panel {
  border: 1px solid var(--color-border);
  border-radius: 0.65rem;
  background: var(--color-bg);
  overflow: hidden;
}

.schema-explorer__panel-summary {
  display: flex;
  align-items: center;
  gap: 0.6rem;
  padding: 0.95rem 1.15rem;
  cursor: pointer;
  font-weight: 600;
  list-style: none;
  user-select: none;
}

.schema-explorer__panel-summary::-webkit-details-marker {
  display: none;
}

.schema-explorer__panel-summary::before {
  content: '';
  width: 0.8rem;
  height: 0.8rem;
  margin-right: 0.35rem;
  background: currentColor;
  mask-repeat: no-repeat;
  mask-position: center;
  mask-size: contain;
  mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="black" d="M9 5l7 7-7 7"/></svg>');
  transition: transform 160ms ease;
}

.schema-explorer__panel[open] .schema-explorer__panel-summary::before {
  transform: rotate(90deg);
}

.schema-explorer__panel-content {
  padding: 0.85rem 1.15rem 1.15rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.schema-explorer__panel-heading {
  flex: 1 1 auto;
  margin: 0;
}

.schema-explorer__panel-summary .schema-node__type {
  margin-left: auto;
}

.schema-explorer__panel-summary .schema-explorer__expand-button {
  margin-left: 0.35rem;
}

.schema-explorer__expand-button {
  position: relative;
  width: 1.75rem;
  height: 1.75rem;
  border-radius: 0.5rem;
  border: 1px solid var(--color-border);
  background: var(--color-bg);
  color: var(--color-muted-fg);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  transition: color 120ms ease, border-color 120ms ease, background 120ms ease;
}

.schema-explorer__expand-button::before {
  content: '';
  width: 1.2rem;
  height: 1.2rem;
  background: currentColor;
  mask-repeat: no-repeat;
  mask-position: center;
  mask-size: contain;
  mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 76 76"><path fill="black" d="M19 29h28v28H19zM43 33H23v20h20zM39 41v4h-4v4h-4v-4h-4v-4h4v-4h4v4zM24 24h28v28h-3V27H24zM54 47V22H29v-3h28v28z"/></svg>');
}

.schema-explorer__expand-button.is-expanded::before {
  mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 76 76"><path fill="black" d="M19 29h28v28H19zM43 33H23v20h20zM39 41v4H27v-4h12zM24 24h28v28h-3V27H24zM54 47V22H29v-3h28v28z"/></svg>');
}

.schema-explorer__expand-button:hover,
.schema-explorer__expand-button:focus-visible {
  border-color: var(--color-primary);
  color: var(--color-primary);
  outline: none;
}

.schema-explorer__expand-button:disabled {
  cursor: not-allowed;
  opacity: 0.45;
}

.schema-explorer__description {
  color: var(--color-muted-fg);
}

.schema-tree {
  list-style: none;
  margin: 0;
  padding: 0;
  display: grid;
  gap: 0.75rem;
}

:global(.schema-node__details) {
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  background: var(--color-bg);
}

:global(.schema-node__details > summary) {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  cursor: pointer;
}

:global(.schema-node__details summary::-webkit-details-marker) {
  display: none;
}

:global(.schema-node__details summary::before) {
  content: '';
  width: 0.85rem;
  height: 0.85rem;
  margin-right: 0.4rem;
  background: currentColor;
  mask-repeat: no-repeat;
  mask-position: center;
  mask-size: contain;
  mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="black" d="M9 5l7 7-7 7"/></svg>');
  transition: transform 160ms ease;
}

:global(.schema-node__details[open] summary::before) {
  transform: rotate(90deg);
}


:global(.schema-node__row) {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 0.75rem;
  width: 100%;
}

:global(.schema-node__summary) {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  flex: 1 1 auto;
  min-width: 0;
}

:global(.schema-node__name) {
  font-family: var(--font-mono, ui-monospace);
  font-size: 0.95rem;
}

:global(.schema-node__pill) {
  display: inline-flex;
  align-items: center;
  padding: 0.1rem 0.5rem;
  border-radius: 999px;
  font-size: 0.7rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.06em;
  margin-left: 0.4rem;
}

:global(.schema-node__pill--required) {
  background: var(--color-red, #e03131);
  color: var(--color-bg);
}

:global(.schema-node__pill--optional) {
  background: var(--color-bg-selected);
  color: var(--color-muted-fg);
}

:global(.schema-node__type),
:global(.schema-node__reference) {
  margin-left: auto;
  flex: 0 0 auto;
  min-width: max-content;
  font-family: var(--font-mono, ui-monospace);
  font-size: 0.8rem;
  display: inline-flex;
  align-items: center;
  gap: 0.25rem;
  padding: 0.15rem 0.55rem;
  border-radius: 999px;
  background: var(--color-bg-selected);
  color: var(--color-muted-fg);
  white-space: nowrap;
}

:global(.schema-node__reference) {
  background: color-mix(in srgb, var(--color-primary) 12%, transparent);
  color: var(--color-primary);
}

:global(.schema-node__type--object) {
  background: color-mix(in srgb, var(--color-green, #2f9e44) 16%, transparent);
  color: var(--color-green, #2f9e44);
}

:global(.schema-node__type--array) {
  background: color-mix(in srgb, var(--color-teal, #0c8599) 18%, transparent);
  color: var(--color-teal, #0c8599);
}

:global(.schema-node__type--string) {
  background: color-mix(in srgb, var(--color-blue, #1c7ed6) 18%, transparent);
  color: var(--color-blue, #1c7ed6);
}

:global(.schema-node__type--integer),
:global(.schema-node__type--number) {
  background: color-mix(in srgb, var(--color-orange, #f59f00) 18%, transparent);
  color: var(--color-orange, #f59f00);
}

:global(.schema-node__type--boolean) {
  background: color-mix(in srgb, var(--color-red, #e03131) 18%, transparent);
  color: var(--color-red, #e03131);
}

:global(.schema-node__type--enum) {
  background: color-mix(in srgb, var(--color-purple, #7048e8) 18%, transparent);
  color: var(--color-purple, #7048e8);
}

:global(.schema-node__type--any) {
  background: var(--color-bg-selected);
  color: var(--color-muted-fg);
}

:global(.schema-node__type--ref) {
  background: color-mix(in srgb, var(--color-purple, #7048e8) 18%, transparent);
  color: var(--color-purple, #7048e8);
}

:global(.schema-node__details--static) {
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  background: var(--color-bg);
}

:global(.schema-node__root) {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

:global(.schema-node__root > .schema-node__content) {
  margin-top: 0;
  border: none;
  padding: 0;
  background: transparent;
}

:global(.schema-node__details--static .schema-node__row) {
  cursor: default;
}

:global(.schema-node__content) {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  margin-top: 0.75rem;
  overflow-x: auto;
}

:global(.schema-node__children) {
  list-style: none;
  margin: 0.5rem 0 0;
  padding-left: 1rem;
  border-left: 2px solid var(--color-border);
  display: grid;
  gap: 0.5rem;
}

:global(.schema-node__description) {
  color: var(--color-muted-fg);
}

:global(.schema-node__enum ul),
:global(.schema-node__examples ul) {
  list-style: disc;
  margin: 0.25rem 0 0 1.25rem;
  padding: 0;
}

:global(.schema-node__empty) {
  font-style: italic;
  color: var(--color-muted-fg);
}

:global(.schema-node__link) {
  color: var(--color-primary);
  text-decoration: none;
}

:global(.schema-node__link:hover) {
  text-decoration: underline;
}

:global(.schema-node__composed) {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

:global(.schema-node__composed-group h4) {
  margin: 0;
  font-size: 0.95rem;
}

:global(.schema-node__composed-group ul) {
  list-style: none;
  margin: 0.5rem 0 0;
  padding-left: 1rem;
  border-left: 2px solid var(--color-border);
  display: grid;
  gap: 0.5rem;
}

.schema-raw {
  border: 1px dashed var(--color-border);
  border-radius: 0.5rem;
  padding: 0.5rem 0.75rem;
  margin: 0;
}

.schema-raw summary {
  cursor: pointer;
  font-weight: 600;
}

@media (max-width: 960px) {
  .schema-explorer__grid {
    grid-template-columns: 1fr;
  }

  .schema-explorer__toc {
    position: static;
  }
}
</style>

<script is:inline>
  (() => {
    const EXPAND_LABEL = 'Expand all schema fields';
    const COLLAPSE_LABEL = 'Collapse all schema fields';

    const setButtonState = (button, expanded) => {
      button.dataset.state = expanded ? 'expanded' : 'collapsed';
      button.setAttribute('aria-pressed', expanded ? 'true' : 'false');
      button.setAttribute('aria-label', expanded ? COLLAPSE_LABEL : EXPAND_LABEL);
      button.classList.toggle('is-expanded', expanded);
    };

    const computeExpanded = (details) => details.length > 0 && details.every((node) => node.open);

    const bindButton = (button) => {
      if (!(button instanceof HTMLButtonElement)) return;
      if (button.dataset.schemaExpandBound === 'true') return;
      const container = button.closest('[data-schema-panel]');
      if (!container) return;
      const details = Array.from(container.querySelectorAll('.schema-node__details'));
      const primaryPanel = container.querySelector('[data-schema-primary]');
      if (details.length === 0) {
        button.disabled = true;
        button.setAttribute('aria-label', 'No expandable fields');
        return;
      }

      button.dataset.schemaExpandBound = 'true';
      setButtonState(button, computeExpanded(details));

      button.addEventListener('click', (event) => {
        event.preventDefault();
        event.stopPropagation();
        const shouldExpand = button.dataset.state !== 'expanded';
        if (shouldExpand && primaryPanel instanceof HTMLDetailsElement) {
          primaryPanel.open = true;
        }
        details.forEach((node) => {
          if (shouldExpand) {
            node.open = true;
          } else {
            node.open = false;
          }
        });
        if (!shouldExpand && primaryPanel instanceof HTMLDetailsElement) {
          primaryPanel.open = false;
        }
        setButtonState(button, shouldExpand);
      });

      details.forEach((node) => {
        node.addEventListener('toggle', () => {
          setButtonState(button, computeExpanded(details));
        });
      });

      if (primaryPanel instanceof HTMLDetailsElement) {
        primaryPanel.addEventListener('toggle', () => {
          if (!primaryPanel.open) {
            details.forEach((node) => {
              node.open = false;
            });
            setButtonState(button, false);
          }
        });
      }

      container.addEventListener('schema:collapse', () => {
        if (primaryPanel instanceof HTMLDetailsElement) {
          primaryPanel.open = false;
        }
        details.forEach((node) => {
          node.open = false;
        });
        setButtonState(button, false);
      });
    };

    const safeEscape = (value) => {
      if (typeof value !== 'string' || !value) return '';
      if (typeof CSS !== 'undefined' && typeof CSS.escape === 'function') {
        return CSS.escape(value);
      }
      return value.replace(/[^a-zA-Z0-9_-]/g, '\\$&');
    };

    const expandFromHash = () => {
      if (typeof window === 'undefined') return;
      const rawHash = window.location.hash;
      if (!rawHash) return;
      const slug = rawHash.replace(/^#/, '');
      if (!slug) return;
      const selector = `[data-schema-panel][data-schema-slug="${safeEscape(slug)}"]`;
      const container = document.querySelector(selector);
      if (!container) return;
      document.querySelectorAll('[data-schema-panel]').forEach((panel) => {
        if (panel !== container) {
          panel.dispatchEvent(new CustomEvent('schema:collapse'));
        }
      });
      const primaryPanel = container.querySelector('[data-schema-primary]');
      if (primaryPanel instanceof HTMLDetailsElement) {
        primaryPanel.open = true;
      }
      const targetHeading = document.getElementById(slug);
      const button = container.querySelector('[data-schema-expand]');
      if (button instanceof HTMLButtonElement && button.dataset.state !== 'expanded') {
        button.click();
      }
      if (targetHeading instanceof HTMLElement) {
        requestAnimationFrame(() => {
          targetHeading.scrollIntoView({ block: 'start', behavior: 'smooth' });
        });
      }
    };

    const init = () => {
      document.querySelectorAll('[data-schema-expand]').forEach((button) => {
        bindButton(button);
      });
      expandFromHash();
      if (typeof window !== 'undefined' && !window.__starlightSchemaHashAttached) {
        window.addEventListener('hashchange', expandFromHash);
        window.__starlightSchemaHashAttached = true;
      }
    };

    if (typeof window !== 'undefined') {
      if (document.readyState === 'complete' || document.readyState === 'interactive') {
        init();
      } else {
        document.addEventListener('DOMContentLoaded', init, { once: true });
      }
      document.addEventListener('astro:page-load', init);
    }
  })();
</script>
