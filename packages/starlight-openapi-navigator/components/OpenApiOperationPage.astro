---
import spec, { loadOperation, getOperationPreferredTag } from 'virtual:starlight-openapi-navigator/spec-data';
import generatedConfig from 'virtual:starlight-openapi-navigator/config';
import '../runtime/theme.css';
import { Tabs, TabItem, Code, Icon } from '@astrojs/starlight/components';
import AnchorHeading from '@astrojs/starlight/components/AnchorHeading.astro';

import OpenApiEndpointSearch from './OpenApiEndpointSearch.astro';

import { DEFAULT_BASE_SLUG } from '../runtime/config.js';
import { buildOperationIndex } from '../runtime/operations.js';
import { resolveEndpointUIMode } from '../runtime/endpoint-ui.js';
import { stripHtml } from '../runtime/text.js';

const { tagSlug, operationSlug } = Astro.props;
const tag = spec.tags?.find((entry) => entry.slug === tagSlug);
const configuredSlug = typeof generatedConfig?.baseSlug === 'string' && generatedConfig.baseSlug.length
  ? generatedConfig.baseSlug
  : DEFAULT_BASE_SLUG;
const configuredEndpointUI =
  typeof generatedConfig?.endpointUI === 'string' ? generatedConfig.endpointUI : 'auto';
const resolvedEndpointUI =
  typeof generatedConfig?.resolvedEndpointUI === 'string'
    ? generatedConfig.resolvedEndpointUI
    : resolveEndpointUIMode(configuredEndpointUI, spec?.stats?.operations || 0);
const operationsIndex = buildOperationIndex(spec, configuredSlug);
const showSearch = resolvedEndpointUI === 'search' && operationsIndex.length > 0;

const schemaSlugMap = buildSchemaSlugMap(spec);
const SUPPORTED_PRIMITIVE_TYPES = new Set(['string', 'number', 'integer', 'boolean']);
const resolvedTagSlug = typeof tagSlug === 'string' && tagSlug.length ? tagSlug : tag?.slug;
let selectedOperation = null;
if (operationSlug) {
  let remoteOperation = await loadOperation(operationSlug, resolvedTagSlug);
  if (!remoteOperation) {
    const fallbackTag = getOperationPreferredTag(operationSlug);
    if (fallbackTag && fallbackTag !== resolvedTagSlug) {
      remoteOperation = await loadOperation(operationSlug, fallbackTag);
    }
  }
  if (remoteOperation) {
    selectedOperation = prepareOperation(remoteOperation);
  }
}

const panelIds = selectedOperation
  ? {
      parameters: `${selectedOperation.slug}-parameters`,
      requestBody: `${selectedOperation.slug}-request-body`,
      responses: `${selectedOperation.slug}-responses`,
      codeSamples: `${selectedOperation.slug}-code-samples`,
    }
  : {};

const panelStorageKeys = selectedOperation
  ? {
      parameters: `${selectedOperation.slug}:parameters`,
      requestBody: `${selectedOperation.slug}:request-body`,
      responses: `${selectedOperation.slug}:responses`,
      codeSamples: `${selectedOperation.slug}:code-samples`,
    }
  : {};

const tryItHref = selectedOperation
  ? `/${configuredSlug}/try/?operation=${encodeURIComponent(selectedOperation.slug)}${tag?.slug || resolvedTagSlug ? `&tag=${encodeURIComponent(tag?.slug || resolvedTagSlug)}` : ''}`
  : '';

function prepareOperation(operation) {
  const parameters = (operation.parameters || [])
    .filter((param) => param && param.name && param.in)
    .map((param) => ({
      ...param,
      description: stripHtml(param?.description),
    }));
  const codeSampleGroups = (operation.codeSampleGroups || [])
    .map((group) => ({
      ...group,
      samples: (group.samples || []).filter((sample) => sample && sample.source),
    }))
    .filter((group) => group.samples.length > 0);
  const requestBodyExamples = (operation.requestBodyExamples || []).filter(
    (group) => group && Array.isArray(group.examples) && group.examples.length
  );
  const responseExamples = (operation.responseExamples || []).filter(
    (group) => group && Array.isArray(group.examples) && group.examples.length
  );
  const responseExamplesByStatus = groupResponseExamples(responseExamples);

  const responseEntries = Object.entries(operation.responses || {}).map(([status, response]) => ({
    status,
    response: response
      ? {
          ...response,
          description: stripHtml(response.description),
        }
      : response,
    exampleGroups: responseExamplesByStatus.get(status) || [],
  }));

  return {
    ...operation,
    summary: stripHtml(operation.summary),
    description: stripHtml(operation.description),
    requestBody: operation.requestBody
      ? {
          ...operation.requestBody,
          description: stripHtml(operation.requestBody.description),
        }
      : operation.requestBody,
    parameters,
    codeSampleGroups,
    requestBodyExamples,
    responseExamples,
    responseExamplesByStatus,
    responseEntries,
  };
}

const formatMethod = (method) => method?.toUpperCase?.() ?? '';
const formatParamType = (param) => {
  const schema = param?.schema || {};
  if (schema.type) return schema.type;
  if (schema.$ref) return schema.$ref.split('/').slice(-1)[0];
  if (schema.anyOf) return 'anyOf';
  if (schema.oneOf) return 'oneOf';
  return 'object';
};
const getParameterTypeInfo = (param) => {
  const schemaRef = resolveSchemaReference(param?.schema?.$ref);
  if (schemaRef) {
    return {
      label: schemaRef.name,
      href: `/${configuredSlug}/schemas#${schemaRef.slug}`,
    };
  }
  return {
    label: formatParamType(param),
    href: '',
  };
};
const formatStatusLabel = (code) => {
  if (!code) return '';
  const numeric = Number(code);
  if (Number.isNaN(numeric)) return code;
  if (numeric >= 200 && numeric < 300) return `${code} Success`;
  if (numeric >= 400 && numeric < 500) return `${code} Client error`;
  if (numeric >= 500) return `${code} Server error`;
  return String(code);
};

const renderParamDescription = (param) => stripHtml(param?.description);

function groupResponseExamples(examples) {
  const map = new Map();
  examples.forEach((group) => {
    if (!group || !group.status) return;
    if (!map.has(group.status)) map.set(group.status, []);
    map.get(group.status).push(group);
  });
  return map;
}


const LANGUAGE_ICON_MAP = new Map(
  Object.entries({
    react: 'seti:react',
    jsx: 'seti:react',
    tsx: 'seti:react',
    rs: 'seti:rust',
    rust: 'seti:rust',
    rb: 'seti:ruby',
    ruby: 'seti:ruby',
    r: 'seti:r',
    cpp: 'seti:cpp',
    'c++': 'seti:cpp',
    c: 'seti:c',
    mdx: 'mdx',
    md: 'seti:markdown',
    markdown: 'seti:markdown',
    ps1: 'seti:powershell',
    bash: 'shell',
    shell: 'shell',
    sh: 'shell',
    curl: 'shell',
    javascript: 'seti:javascript',
    js: 'seti:javascript',
    'node.js': 'node',
    node: 'node',
    typescript: 'seti:typescript',
    ts: 'seti:typescript',
    python: 'seti:python',
    py: 'seti:python',
   value.trim().toLowerCase() : '';
}

function getLanguageIcon(language, fallback) {
  const key = normalizeKey(language);
  if (LANGUAGE_ICON_MAP.has(key)) return LANGUAGE_ICON_MAP.get(key);
  const fallbackKey = normalizeKey(fallback);
  if (LANGUAGE_ICON_MAP.has(fallbackKey)) return LANGUAGE_ICON_MAP.get(falKEY = 'starlight-openapi-navigator-api-key';

const resolveSchemaReference = (ref) => {
  if (typeof ref !== 'string') return undefined;
  const match = ref.match(/#\/components\/schemas\/(.+)$/);
  if (!match) return undefined;
  const name = match[1];
  const slug = schemaSlugMap.get(name) ??e__missing">
    {showSearch && (
      <div class="api-operation-page__search">
        <OpenApiEndpointSearch
          operations={operationsIndex}
          inputId="operation-endpoint-search"
          label="Jump to an endpoint"
          helperText="Search across the documented endpoints to locate the right tag."
        />
      </div>
    )}
    <p>Unable to locate the <code>{tagSlug}</code> tag in the bundled OpenAPI spec.</p>
  </div>
)}

{tag && !selectedOperation && (
  <div class="api-operation-page__missing">
    {showSearch && (
      <div class="api-operation-page__search">
        <OpenApiEndpointSearch
          operations={operationsIndex}
          inputId="operation-endpoint-search"
          label="Jump to an endpoint"
          helperText="Search for another endpoint to continue."
        />
      </div>
    )}
    <p>
      Unable to find the <code>{operationSlug}</code> operation within the <code>{tagSlug}</code> tag.
    </p>
    <p>
      Return to the <a href={`/${configuredSlug}/`}>API overview</a> to browse available endpoints.
    </p>
  </div>
)}

{tag && selectedOperation && (
  <div class="api-operation-page">
    {showSearch && (
      <div class="api-operation__search">
        <OpenApiEndpointSearch
          operations={operationsIndex}
          inputId="operation-endpoint-search"
          label="Jump to an endpoint"
          helperText="Search to quickly navigate to another endpoint."
        />
      </div>
    )}
    <section id={selectedOperation.slug} class="api-operation" data-operation-slug={selectedOperation.slug}>
      <header class="api-operation__header">
        <AnchorHeading level="2" id={selectedOperation.slug} class="api-operation__title">
          <span class={`api-operation__method api-operation__method--${selectedOperation.method}`}>
            {formatMethod(selectedOperation.method)}
          </span>
          <code class="api-operation__path">{selectedOperation.path}</code>
          {selectedOperation.deprecated && <span class="api-operation__badge">Deprecated</span>}
        </AnchorHeading>
        {selectedOperation.tags?.length > 0 && (
          <ul class="api-operation__tag-list">
            {selectedOperation.tags.map((tagRef) => (
              <li>{tagRef.name}</li>
            ))}
          </ul>
        )}
      </header>

      {selectedOperation.summary && (
        <p class="api-operation__summary">{selectedOperation.summary}</p>
      )}
      {selectedOperation.description && (
        <div class="api-operation__description">
          {selectedOperation.description}
        </div>
      )}

      {selectedOperation.parameters.length > 0 && (
        <details
          class="api-operation__panel"
          data-panel-storage-key={panelStorageKeys.parameters}
        >
          <summary>
            <Icon name="lucide:list" aria-hidden="true" />
            Parameters
          </summary>
          <div class="api-operation__panel-body">
            <AnchorHeading level="3" id={panelIds.parameters} class="api-operation__panel-title">
              Parameters
            </AnchorHeading>
            <div class="api-operation__parameters">
              <table class="api-operation__parameters-table">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>In</th>
                    <th>Type</th>
                    <th>Required</th>
                    <th>Description</th>
                  </tr>
                </thead>
                <tbody>
                  {selectedOperation.parameters.map((param) => {
                    const typeInfo = getParameterTypeInfo(param);
                    return (
                      <tr>
                        <td><code>{param.name}</code></td>
                        <td>{param.in}</td>
                        <td>
                          {typeInfo.href ? (
                            <a class="api-schema-link" href={typeInfo.href}>
                              {typeInfo.label}
                            </a>
                          ) : (
                            typeInfo.label
                          )}
                        </td>
                        <td>{param.required ? 'Yes' : 'No'}</td>
                        <td>{renderParamDescription(param)}</td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>

              <ul class="api-operation__parameters-list">
                {selectedOperation.parameters.map((param) => {
                  const typeInfo = getParameterTypeInfo(param);
                  const description = renderParamDescription(param);
                  return (
                    <li class="api-operation__parameters-card">
                      <div class="api-operation__parameters-card-header">
                        <code class="api-operation__parameters-card-name">{param.name}</code>
                        <span class="api-operation__parameters-chip">{param.in}</span>
                        <span
                          class={`api-operation__parameters-chip ${
                            param.required
                              ? 'api-operation__parameters-chip--required'
                              : 'api-operation__parameters-chip--optional'
                          }`}
                        >
                          {param.required ? 'Required' : 'Optional'}
                        </span>
                      </div>
                      <div class="api-operation__parameters-card-meta">
                        <span class="api-operation__parameters-meta-label">Type</span>
                        <span class="api-operation__parameters-meta-value">
                          {typeInfo.href ? (
                            <a class="api-schema-link" href={typeInfo.href}>
                              {typeInfo.label}
                            </a>
                          ) : (
                            typeInfo.label
                          )}
                        </span>
                      </div>
                      {description && (
                        <p class="api-operation__parameters-card-description">{description}</p>
                      )}
                    </li>
                  );
                })}
              </ul>
            </div>
          </div>
        </details>
      )}

      {selectedOperation.requestBody && (
        <details
          class="api-operation__panel"
          data-panel-storage-key={panelStorageKeys.requestBody}
        >
          <summary>
            <Icon name="lucide:file-text" aria-hidden="true" />
            Request body
          </summary>
          <div class="api-operation__panel-body">
            <AnchorHeading level="3" id={panelIds.requestBody} class="api-operation__panel-title">
              Request body
            </AnchorHeading>
            <ul>
              {Object.entries(selectedOperation.requestBody?.content || {}).map(([contentType, media]) => (
                <li>
                  <code>{contentType}</code>
                  {(() => {
                    const schemaRef = resolveSchemaReference(media?.schema?.$ref);
                    if (schemaRef) {
                      return (
                        <span>
                          {' '}
                          →{' '}
                          <a
                            class="api-schema-link"
                            href={`/${configuredSlug}/schemas#${schemaRef.slug}`}
                          >
                            {schemaRef.name}
                          </a>
                        </span>
                      );
                    }
                    if (media?.schema?.type) {
                      return (
                        <span>
                          {' '}
                          ({media.schema.type})
                        </span>
                      );
                    }
                    return null;
                  })()}
                </li>
              ))}
            </ul>
            {selectedOperation.requestBody?.description && (
              <p>{stripHtml(selectedOperation.requestBody.description)}</p>
            )}
            {selectedOperation.requestBodyExamples.length > 0 && (
              <div class="api-operation__examples">
                {selectedOperation.requestBodyExamples.map((group) => (
                  <div class="api-operation__example-group">
                    <div class="api-operation__example-header">
                      <h4>{group.contentType}</h4>
                    </div>
                    <Tabs syncKey={getTabsSyncKey('request', selectedOperation.slug, group.contentType)}>
                      {group.examples.map((example) => (
                        <TabItem
                          label={example.label}
                          icon={getLanguageIcon(example.language, group.syntax)}
                        >
                          <Code code={example.value} lang={group.syntax} />
                          {(example.description || example.externalValue) && (
                            <p class="api-operation__example-note">
                              {stripHtml(example.description)}
                              {example.externalValue && (
                                <>
                                  {example.description ? ' ' : ''}
                                  <a href={example.externalValue} target="_blank" rel="noreferrer">
                                    View external example
                                  </a>
                                </>
                              )}
                            </p>
                          )}
                        </TabItem>
                      ))}
                    </Tabs>
                  </div>
                ))}
              </div>
            )}
          </div>
        </details>
      )}

      {selectedOperation.responses && (
        <details
          class="api-operation__panel"
          data-panel-storage-key={panelStorageKeys.responses}
        >
          <summary>
            <Icon name="lucide:cloud-download" aria-hidden="true" />
            Sample responses
          </summary>
          <div class="api-operation__panel-body">
            <AnchorHeading level="3" id={panelIds.responses} class="api-operation__panel-title">
              Sample responses
            </AnchorHeading>
            <ul class="api-operation__responses">
              {selectedOperation.responseEntries.map(({ status, response, exampleGroups }) => (
                <li>
                  <div class="api-operation__response-heading">
                    <strong>{formatStatusLabel(status)}</strong>
                    {response?.description && <span> — {stripHtml(response.description)}</span>}
                  </div>
                  {exampleGroups.length > 0 && (
                    <div class="api-operation__examples">
                      {exampleGroups.map((group) => (
                        <div class="api-operation__example-group">
                          <div class="api-operation__example-header">
                            <h4>
                              {group.contentType}
                              {(() => {
                                const schemaRef = resolveSchemaReference(
                                  response?.content?.[group.contentType]?.schema?.$ref
                                );
                                const schemaType = response?.content?.[group.contentType]?.schema?.type;
                                if (schemaRef) {
                                  return (
                                    <span>
                                      {' '}
                                      →{' '}
                                      <a
                                        class="api-schema-link"
                                        href={`/${configuredSlug}/schemas#${schemaRef.slug}`}
                                      >
                                        {schemaRef.name}
                                      </a>
                                    </span>
                                  );
                                }
                                if (schemaType) {
                                  return (
                                    <span>
                                      {' '}
                                      ({schemaType})
                                    </span>
                                  );
                                }
                                return null;
                              })()}
                            </h4>
                          </div>
                          <Tabs syncKey={getTabsSyncKey(status, selectedOperation.slug, group.contentType)}>
                            {group.examples.map((example) => (
                              <TabItem
                                label={example.label}
                                icon={getLanguageIcon(example.language || group.syntax, group.syntax)}
                              >
                                <Code code={example.value} lang={group.syntax} />
                                {(example.description || example.externalValue) && (
                                  <p class="api-operation__example-note">
                                    {stripHtml(example.description)}
                                    {example.externalValue && (
                                      <>
                                        {example.description ? ' ' : ''}
                                        <a href={example.externalValue} target="_blank" rel="noreferrer">
                                          View external example
                                        </a>
                                      </>
                                    )}
                                  </p>
                                )}
                              </TabItem>
                            ))}
                          </Tabs>
                        </div>
                      ))}
                    </div>
                  )}
                </li>
              ))}
            </ul>
          </div>
        </details>
      )}

      {selectedOperation.codeSampleGroups.length > 0 && (
        <details
          class="api-operation__panel"
          data-panel-storage-key={panelStorageKeys.codeSamples}
        >
          <summary>
            <Icon name="lucide:code" aria-hidden="true" />
            Code samples
          </summary>
          <div class="api-operation__panel-body">
            <AnchorHeading level="3" id={panelIds.codeSamples} class="api-operation__panel-title">
              Code samples
            </AnchorHeading>
            <div class="api-operation__samples">
              {selectedOperation.codeSampleGroups.map((group) => (
                <div class="api-operation__sample-group">
                  <h3>{group.label}</h3>
                  <Tabs syncKey={getTabsSyncKey('sample', selectedOperation.slug, group.label)}>
                    {group.samples.map((sample) => (
                      <TabItem
                        label={sample.language}
                        icon={getLanguageIcon(sample.language, sample.syntax)}
                      >
                        <Code code={sample.source} lang={sample.syntax} />
                      </TabItem>
                    ))}
                  </Tabs>
                </div>
              ))}
            </div>
          </div>
        </details>
      )}

      {selectedOperation && tryItHref && (
        <aside class="api-operation__tryit-cta">
          <Icon name="lucide:play" aria-hidden="true" />
          <div class="api-operation__tryit-copy">
            <p class="api-operation__tryit-title">Try this endpoint live</p>
            <p class="api-operation__tryit-text">
              Launch the interactive playground to send real requests with your credentials.
            </p>
          </div>
          <a class="api-operation__tryit-link" href={tryItHref}>
            Open Try It →
          </a>
        </aside>
      )

    </section>
  </div>
)}

<style scoped>
.api-tag {
  display: flex;
  flex-direction: column;
  gap: 3rem;
}

.api-tag__lead {
  font-size: 1.05rem;
  color: var(--color-muted-fg);
}

.api-operation {
  border: 1px solid var(--color-border);
  border-radius: 1rem;
  padding: 1.75rem;
  background: var(--color-bg-muted, var(--color-bg));
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.api-operation__header {
  display: flex;
  flex-wrap: wrap;
  gap: 0.75rem;
  align-items: center;
}

.api-operation__title {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin: 0;
  font-size: 1.35rem;
}

.api-operation__method {
  font-size: 0.85rem;
  font-weight: 600;
  text-transform: uppercase;
  padding: 0.35rem 0.8rem;
  border-radius: 999px;
  color: var(--color-bg);
  background: var(--color-primary);
}

.api-operation__method--get { background: var(--color-green, #2f9e44); }
.api-operation__method--post { background: var(--color-blue, #1c7ed6); }
.api-operation__method--delete { background: var(--color-red, #e03131); }
.api-operation__method--put { background: var(--color-yellow, #e67700); }
.api-operation__method--patch { background: var(--color-teal, #099268); }

.api-operation__path {
  font-size: 1rem;
  padding: 0.3rem 0.65rem;
  border-radius: 0.5rem;
  background: var(--color-bg-selected);
}

.api-operation__badge {
  font-size: 0.75rem;
  background: var(--color-orange, #f08c00);
  color: var(--color-bg);
  padding: 0.25rem 0.6rem;
  border-radius: 999px;
}

.api-operation__summary {
  font-weight: 600;
}

.api-operation__panel {
  border: 1px solid var(--color-border);
  border-radius: 0.75rem;
  background: var(--color-bg);
  overflow: hidden;
}

.api-operation__panel summary {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
  padding: 0.85rem 1.1rem;
  font-weight: 600;
  background: var(--color-bg-muted, var(--color-bg-selected));
}

.api-operation__panel summary :global(svg) {
  display: inline-block;
}

.api-operation__panel-title {
  display: inline-flex;
  align-items: center;
  gap: 0.35rem;
  margin: 0 0 1rem;
  font-size: 1.05rem;
}

.api-operation__panel-body {
  padding: 1rem 1.1rem;
}

.api-operation__panel table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.95rem;
}

.api-operation__panel th,
.api-operation__panel td {
  border: 1px solid var(--color-border);
  padding: 0.5rem 0.6rem;
  text-align: left;
  vertical-align: top;
}

.api-operation__panel th {
  background: var(--color-bg-muted, var(--color-bg-selected));
  font-weight: 600;
}

.api-operation__parameters {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.api-operation__parameters-table {
  width: 100%;
}

.api-operation__parameters-list {
  display: none;
  list-style: none;
  padding: 0;
  margin: 0;
  gap: 0.85rem;
}

.api-operation__parameters-card {
  border: 1px solid var(--color-border);
  border-radius: 0.65rem;
  padding: 0.85rem;
  background: var(--color-bg-muted, var(--color-bg));
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.api-operation__parameters-card-header {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: 0.5rem;
}

.api-operation__parameters-card-name {
  font-family: var(--font-mono, ui-monospace);
  font-size: 0.95rem;
  padding: 0.15rem 0.4rem;
  border-radius: 0.4rem;
  background: var(--color-bg-selected);
}

.api-operation__parameters-chip {
  display: inline-flex;
  align-items: center;
  padding: 0.2rem 0.55rem;
  border-radius: 999px;
  font-size: 0.75rem;
  font-weight: 600;
  background: var(--color-bg-muted, var(--color-bg-selected));
  color: var(--color-muted-fg);
}

.api-operation__parameters-chip--required {
  background: var(--color-red, #e03131);
  color: var(--color-bg);
}

.api-operation__parameters-chip--optional {
  background: var(--color-bg-selected);
}

.api-operation__parameters-card-meta {
  display: flex;
  flex-wrap: wrap;
  align-items: baseline;
  gap: 0.35rem;
  font-size: 0.9rem;
}

.api-operation__parameters-meta-label {
  font-weight: 600;
  text-transform: uppercase;
  font-size: 0.7rem;
  letter-spacing: 0.05em;
  color: var(--color-muted-fg);
}

.api-operation__parameters-meta-value {
  font-family: var(--font-mono, ui-monospace);
}

.api-operation__parameters-card-description {
  margin: 0;
  font-size: 0.9rem;
}

@media (max-width: 48rem) {
  .api-operation__parameters-table {
    display: none;
  }

  .api-operation__parameters-list {
    display: flex;
    flex-direction: column;
  }
}

.api-operation__responses {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.api-operation__response-heading {
  display: flex;
  flex-wrap: wrap;
  gap: 0.35rem;
  align-items: baseline;
}

.api-operation__responses li strong {
  font-family: var(--font-mono, ui-monospace);
}

.api-operation__samples {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.api-operation__examples {
  display: flex;
  flex-direction: column;
  gap: 1.25rem;
  margin-top: 1rem;
}

.api-operation__example-group {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.api-operation__example-header {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.api-operation__example-header h4 {
  margin: 0;
  font-size: 0.95rem;
  font-weight: 600;
}

.api-operation__sample-group {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.api-operation__example-note {
  margin: 0.5rem 0 0;
  font-size: 0.85rem;
  color: var(--color-muted-fg);
}

.api-operation__tryit-cta {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin: 1.5rem 0 0;
  padding: 1rem 1.25rem;
  border: 1px solid var(--color-border);
  border-radius: 0.75rem;
  background: var(--color-bg-muted, var(--color-bg-selected));
}

.api-operation__tryit-copy {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 0.35rem;
}

.api-operation__tryit-title {
  font-size: 1rem;
  font-weight: 600;
  margin: 0;
}

.api-operation__tryit-text {
  margin: 0;
  font-size: 0.9rem;
  color: var(--color-muted-fg);
}

.api-operation__tryit-link {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.6rem 0.9rem;
  border-radius: 0.6rem;
  font-weight: 600;
  background: var(--color-primary);
  color: var(--color-on-primary, #fff);
  text-decoration: none;
  transition: background-color 150ms ease, transform 150ms ease;
}

.api-operation__tryit-link:hover {
  transform: translateY(-1px);
  background: color-mix(in srgb, var(--color-primary) 85%, #0000 15%);
}

@media (max-width: 48rem) {
  .api-operation__tryit-cta {
    flex-direction: column;
    align-items: flex-start;
  }

  .api-operation__tryit-link {
    width: 100%;
    justify-content: center;
  }
}


.api-operation-page {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.api-operation-page__search {
  margin-bottom: 1.5rem;
}

.api-operation__search {
  margin-bottom: 2rem;
}

.api-operation-page__missing {
  padding: 1.5rem;
  border: 1px solid var(--color-border);
  border-radius: 0.75rem;
  background: var(--color-bg-muted, var(--color-bg));
}

.api-operation__tag-list {
  list-style: none;
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin: 0;
  padding: 0;
}

.api-operation__tag-list li {
  font-size: 0.8rem;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.06em;
  padding: 0.25rem 0.6rem;
  border-radius: 999px;
  background: var(--color-bg-muted, var(--color-bg-selected));
  color: var(--color-muted-fg);
}

.api-schema-link {
  color: var(--color-primary);
  text-decoration: none;
}

.api-schema-link:hover {
  text-decoration: underline;
}

</style>

<script is:inline>
  (() => {
    const PANEL_STORAGE_PREFIX = 'starlight-openapi-panel:';
    const LANGUAGE_STORAGE_KEY = 'starlight-preferred-lang';

    const readStorage = (key) => {
      try {
        return window.localStorage?.getItem(key) || '';
      } catch {
        return '';
      }
    };

    const writeStorage = (key, value) => {
      try {
        if (value === undefined || value === null || value === '') {
          window.localStorage?.removeItem(key);
        } else {
          window.localStorage?.setItem(key, value);
        }
      } catch {
        /* ignore */
      }
    };

    const normalize = (value) => (typeof value === 'string' ? value.trim().toLowerCase() : '');

    const hydratePanelOpenState = () => {
      document.querySelectorAll('[data-panel-storage-key]').forEach((details) => {
        if (!(details instanceof HTMLDetailsElement)) return;
        const key = details.getAttribute('data-panel-storage-key');
        if (!key) return;
        const stored = readStorage(PANEL_STORAGE_PREFIX + key);
        if (stored === 'open') {
          details.open = true;
        } else if (stored === 'closed') {
          details.open = false;
        }
      });
    };

    const attachPanelListeners = () => {
      document.querySelectorAll('[data-panel-storage-key]').forEach((details) => {
        if (!(details instanceof HTMLDetailsElement)) return;
        if (details.dataset.panelListenerAttached === 'true') return;
        details.dataset.panelListenerAttached = 'true';
        const key = details.getAttribute('data-panel-storage-key');
        if (!key) return;
        details.addEventListener('toggle', () => {
          writeStorage(PANEL_STORAGE_PREFIX + key, details.open ? 'open' : 'closed');
        });
      });
    };

    const applyLanguagePreference = (label) => {
      if (!label) return;
      const desired = normalize(label);
      if (!desired) return;
      document.querySelectorAll('starlight-tabs[data-sync-key^="sample-"]').forEach((tabsEl) => {
        const tabs = tabsEl?.shadowRoot?.querySelectorAll('[role="tab"]');
        if (!tabs || !tabs.length) return;
        for (const tab of tabs) {
          if (!(tab instanceof HTMLElement)) continue;
          const tabLabel = normalize(tab.textContent || '');
          if (tabLabel === desired) {
            tab.click();
            break;
          }
        }
      });
    };

    const hydrateLanguagePreference = () => {
      const stored = readStorage(LANGUAGE_STORAGE_KEY);
      if (stored) {
        applyLanguagePreference(stored);
      }
    };

    const attachLanguageListeners = () => {
      document.querySelectorAll('starlight-tabs[data-sync-key^="sample-"]').forEach((tabsEl) => {
        if (tabsEl.dataset.langListenerAttached === 'true') return;
        tabsEl.dataset.langListenerAttached = 'true';
        tabsEl.addEventListener('click', (event) => {
          const target = event.target;
          if (!(target instanceof HTMLElement)) return;
          if (target.getAttribute('role') !== 'tab') return;
          const label = target.textContent?.trim();
          if (!label) return;
          writeStorage(LANGUAGE_STORAGE_KEY, label);
        });
      });
    };

    const init = () => {
      hydratePanelOpenState();
      attachPanelListeners();
      hydrateLanguagePreference();
      attachLanguageListeners();
    };

    if (typeof window !== 'undefined') {
      if (document.readyState === 'complete' || document.readyState === 'interactive') {
        init();
      } else {
        document.addEventListener('DOMContentLoaded', init, { once: true });
      }
      document.addEventListener('astro:page-load', init);
    }
  })();
</script>
