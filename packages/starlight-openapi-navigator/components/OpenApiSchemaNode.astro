---
import { renderMarkdownLinks } from '../runtime/text.js';
import '../runtime/theme.css';

const {
  name = null,
  schema,
  required = false,
  depth = 0,
  slugMap,
} = Astro.props;

const displayName = name ?? 'value';
const nodeClass = `schema-node depth-${depth}`;
const showRequirement = name !== null;

const pillClassBase = required ? 'schema-node__pill schema-node__pill--required' : 'schema-node__pill schema-node__pill--optional';
const pillLabel = required ? 'Required' : 'Optional';

const sanitizeTypeClass = (value) => {
  if (!value) return '';
  return value.toString().toLowerCase().replace(/[^a-z0-9]+/g, '-');
};

const buildTypeClass = (base) => {
  const safe = sanitizeTypeClass(base);
  return safe ? `schema-node__type schema-node__type--${safe}` : 'schema-node__type';
};

const resolveSchemaReference = (ref) => {
  if (typeof ref !== 'string') return undefined;
  const match = ref.match(/#\/components\/schemas\/(.+)$/);
  if (!match) return undefined;
  const refName = match[1];
  const slug = slugMap?.get(refName) ?? refName.toLowerCase();
  return { name: refName, slug };
};

const inferType = (value) => {
  if (!value || typeof value !== 'object') return 'any';
  if (value.type) return value.type;
  if (value.properties) return 'object';
  if (value.items) return 'array';
  if (value.enum) return 'enum';
  return 'any';
};

const SchemaNode = Astro.self;

const normalizedSchema = schema && typeof schema === 'object' ? schema : null;
const type = inferType(normalizedSchema);
const properties = normalizedSchema?.properties && typeof normalizedSchema.properties === 'object'
  ? Object.entries(normalizedSchema.properties)
  : [];
const requiredSet = new Set(Array.isArray(normalizedSchema?.required) ? normalizedSchema.required : []);
const items = normalizedSchema?.items;
const examples = Array.isArray(normalizedSchema?.examples)
  ? normalizedSchema.examples
  : normalizedSchema?.example !== undefined
    ? [normalizedSchema.example]
    : [];
const combinationEntries = [
  ['allOf', normalizedSchema?.allOf],
  ['oneOf', normalizedSchema?.oneOf],
  ['anyOf', normalizedSchema?.anyOf],
].filter(([, list]) => Array.isArray(list) && list.length);

const schemaFormat = typeof normalizedSchema?.format === 'string' ? normalizedSchema.format : '';
const baseTypeLabel = type || 'any';
const typeLabel = schemaFormat ? `${baseTypeLabel} (${schemaFormat})` : baseTypeLabel;

const hasDescription = typeof normalizedSchema?.description === 'string' && normalizedSchema.description.trim().length > 0;
const descriptionHtml = hasDescription ? renderMarkdownLinks(normalizedSchema.description) : '';
const hasEnum = Array.isArray(normalizedSchema?.enum) && normalizedSchema.enum.length > 0;
const hasDefault = normalizedSchema?.default !== undefined;
const hasExamples = examples.length > 0;
const hasComposed = combinationEntries.length > 0;
const hasObjectContent = type === 'object';
const hasArrayContent = type === 'array';
const hasExpandableContent =
  hasDescription
  || hasEnum
  || hasDefault
  || hasExamples
  || hasComposed
  || hasObjectContent
  || hasArrayContent;
const isRootNode = depth === 0 && name === null;
---
{!normalizedSchema ? (
  <li class={nodeClass}>
    <div class="schema-node__details schema-node__details--static">
      <div class="schema-node__row">
        {(name || showRequirement) && (
          <span class="schema-node__summary">
            {name && <code class="schema-node__name">{displayName}</code>}
            {showRequirement && <span class={pillClassBase}>{pillLabel}</span>}
          </span>
        )}
        <span class={buildTypeClass('any')}>any</span>
      </div>
    </div>
  </li>
) : normalizedSchema.$ref ? (
  (() => {
    const ref = resolveSchemaReference(normalizedSchema.$ref);
    if (!ref) {
      return (
        <li class={nodeClass}>
          <div class="schema-node__details schema-node__details--static">
            <div class="schema-node__row">
              {(name || showRequirement) && (
                <span class="schema-node__summary">
                  {name && <code class="schema-node__name">{displayName}</code>}
                  {showRequirement && <span class={pillClassBase}>{pillLabel}</span>}
                </span>
              )}
              <span class={buildTypeClass('$ref')}>$ref</span>
            </div>
          </div>
        </li>
      );
    }
    return (
      <li class={nodeClass}>
        <div class="schema-node__details schema-node__details--static">
          <div class="schema-node__row">
            {(name || showRequirement) && (
              <span class="schema-node__summary">
                {name && <code class="schema-node__name">{displayName}</code>}
                {showRequirement && <span class={pillClassBase}>{pillLabel}</span>}
              </span>
            )}
            <span class="schema-node__reference">
              <a class="schema-node__link" href={`#${ref.slug}`}>
                {ref.name}
              </a>
            </span>
          </div>
        </div>
      </li>
    );
  })()
) : (
  <li class={nodeClass}>
    {isRootNode ? (
      <div class="schema-node__root">
        <div class="schema-node__content">
          {Array.isArray(normalizedSchema?.enum) && normalizedSchema.enum.length > 0 && (
            <div class="schema-node__enum">
              <strong>Enum values:</strong>
              <ul>
                {normalizedSchema.enum.map((value, idx) => (
                  <li key={`enum-${idx}`}><code>{String(value)}</code></li>
                ))}
              </ul>
            </div>
          )}

          {normalizedSchema?.default !== undefined && (
            <div class="schema-node__meta">
              <strong>Default:</strong>{' '}
              <code>{String(normalizedSchema.default)}</code>
            </div>
          )}

          {examples.length > 0 && (
            <div class="schema-node__examples">
              <strong>Examples:</strong>
              <ul>
                {examples.map((example, index) => (
                  <li key={`example-${index}`}><code>{String(example)}</code></li>
                ))}
              </ul>
            </div>
          )}

          {combinationEntries.length > 0 && (
            <div class="schema-node__composed">
              {combinationEntries.map(([label, list]) => (
                <div class="schema-node__composed-group" key={label}>
                  <h4>{label}</h4>
                  <ul class="schema-node__children">
                    {list.map((item, idx) => (
                      <SchemaNode
                        key={`${label}-${idx}`}
                        name={`${label}[${idx}]`}
                        schema={item}
                        required={false}
                        depth={depth + 1}
                        slugMap={slugMap}
                      />
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          )}

          {type === 'object' && (
            properties.length ? (
              <ul class="schema-node__children">
                {properties.map(([propName, propSchema]) => (
                  <SchemaNode
                    key={`${displayName}-prop-${propName}`}
                    name={propName}
                    schema={propSchema}
                    required={requiredSet.has(propName)}
                    depth={depth + 1}
                    slugMap={slugMap}
                  />
                ))}
              </ul>
            ) : (
              <p class="schema-node__empty">No declared properties.</p>
            )
          )}

          {type === 'array' && (
            <div class="schema-node__array">
              <h4>Items</h4>
              {Array.isArray(items) ? (
                <ul class="schema-node__children">
                  {items.map((itemSchema, index) => (
                    <SchemaNode
                      key={`${displayName}-item-${index}`}
                      name={`[${index}]`}
                      schema={itemSchema}
                      depth={depth + 1}
                      slugMap={slugMap}
                    />
                  ))}
                </ul>
              ) : items ? (
                <ul class="schema-node__children">
                  <SchemaNode
                    key={`${displayName}-item`}
                    name={'item'}
                    schema={items}
                    depth={depth + 1}
                    slugMap={slugMap}
                  />
                </ul>
              ) : (
                <p class="schema-node__empty">Any item type</p>
              )}
            </div>
          )}
        </div>
      </div>
    ) : hasExpandableContent ? (
      <details class="schema-node__details">
        <summary class="schema-node__row">
          {(name || showRequirement) && (
            <span class="schema-node__summary">
              {name && <code class="schema-node__name">{displayName}</code>}
              {showRequirement && <span class={pillClassBase}>{pillLabel}</span>}
            </span>
          )}
          <span class={buildTypeClass(baseTypeLabel || 'any')}>
            {typeLabel || 'any'}
          </span>
        </summary>
        <div class="schema-node__content">
          {descriptionHtml && (
            <p class="schema-node__description" set:html={descriptionHtml}></p>
          )}

          {Array.isArray(normalizedSchema?.enum) && normalizedSchema.enum.length > 0 && (
            <div class="schema-node__enum">
              <strong>Enum values:</strong>
              <ul>
                {normalizedSchema.enum.map((value, idx) => (
                  <li key={`enum-${idx}`}><code>{String(value)}</code></li>
                ))}
              </ul>
            </div>
          )}

          {normalizedSchema?.default !== undefined && (
            <div class="schema-node__meta">
              <strong>Default:</strong>{' '}
              <code>{String(normalizedSchema.default)}</code>
            </div>
          )}

          {examples.length > 0 && (
            <div class="schema-node__examples">
              <strong>Examples:</strong>
              <ul>
                {examples.map((example, index) => (
                  <li key={`example-${index}`}><code>{String(example)}</code></li>
                ))}
              </ul>
            </div>
          )}

          {combinationEntries.length > 0 && (
            <div class="schema-node__composed">
              {combinationEntries.map(([label, list]) => (
                <div class="schema-node__composed-group" key={label}>
                  <h4>{label}</h4>
                  <ul class="schema-node__children">
                    {list.map((item, idx) => (
                      <SchemaNode
                        key={`${label}-${idx}`}
                        name={`${label}[${idx}]`}
                        schema={item}
                        required={false}
                        depth={depth + 1}
                        slugMap={slugMap}
                      />
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          )}

          {type === 'object' && (
            properties.length ? (
              <ul class="schema-node__children">
                {properties.map(([propName, propSchema]) => (
                  <SchemaNode
                    key={`${displayName}-prop-${propName}`}
                    name={propName}
                    schema={propSchema}
                    required={requiredSet.has(propName)}
                    depth={depth + 1}
                    slugMap={slugMap}
                  />
                ))}
              </ul>
            ) : (
              <p class="schema-node__empty">No declared properties.</p>
            )
          )}

          {type === 'array' && (
            <div class="schema-node__array">
              <h4>Items</h4>
              {Array.isArray(items) ? (
                <ul class="schema-node__children">
                  {items.map((itemSchema, index) => (
                    <SchemaNode
                      key={`${displayName}-item-${index}`}
                      name={`[${index}]`}
                      schema={itemSchema}
                      depth={depth + 1}
                      slugMap={slugMap}
                    />
                  ))}
                </ul>
              ) : items ? (
                <ul class="schema-node__children">
                  <SchemaNode
                    key={`${displayName}-item`}
                    name={'item'}
                    schema={items}
                    depth={depth + 1}
                    slugMap={slugMap}
                  />
                </ul>
              ) : (
                <p class="schema-node__empty">Any item type</p>
              )}
            </div>
          )}
        </div>
      </details>
    ) : (
      <div class="schema-node__details schema-node__details--static">
        <div class="schema-node__row">
          {(name || showRequirement) && (
            <span class="schema-node__summary">
              {name && <code class="schema-node__name">{displayName}</code>}
              {showRequirement && <span class={pillClassBase}>{pillLabel}</span>}
            </span>
          )}
          <span class={buildTypeClass(baseTypeLabel || 'any')}>
            {typeLabel || 'any'}
          </span>
        </div>
      </div>
    )}
  </li>
)}
<style scoped>
.schema-node {
  list-style: none;
  margin: 0;
  padding: 0;
}

.schema-node + .schema-node {
  margin-top: 0.75rem;
}

.schema-node__details,
.schema-node__details--static,
.schema-node__root {
  border: 1px solid var(--color-border, #2f353d);
  border-radius: 0.75rem;
  background: var(--color-bg-muted, color-mix(in srgb, var(--color-bg, #0f1115) 90%, #ffffff 10%));
}

.schema-node__details {
  margin: 0;
}

.schema-node__details summary {
  list-style: none;
  cursor: pointer;
}

.schema-node__row {
  display: flex;
  align-items: baseline;
  justify-content: space-between;
  gap: 0.75rem;
  padding: 0.75rem 1rem;
  transition: background-color 120ms ease, border-color 120ms ease;
}

.schema-node__details summary.schema-node__row {
  border-radius: 0.75rem;
}

.schema-node__details summary.schema-node__row:hover {
  background: color-mix(in srgb, var(--color-primary, #4c82fb) 10%, transparent);
}

.schema-node__details summary.schema-node__row:focus-visible {
  outline: 2px solid color-mix(in srgb, var(--color-primary, #4c82fb) 55%, transparent);
  outline-offset: 2px;
}

.schema-node__summary {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  flex: 1 1 auto;
  min-width: 0;
}

.schema-node__name {
  font-weight: 600;
  font-size: 0.95rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.schema-node__pill {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-size: 0.65rem;
  font-weight: 600;
  letter-spacing: 0.08em;
  text-transform: uppercase;
  padding: 0.15rem 0.5rem;
  border-radius: 999px;
  border: 1px solid transparent;
}

.schema-node__pill--required {
  --schema-pill-color: var(--color-red, #e03131);
  background: var(--schema-pill-color);
  border-color: color-mix(in srgb, var(--schema-pill-color) 70%, transparent);
  color: var(--color-on-accent, #ffffff);
}

.schema-node__pill--optional {
  --schema-pill-color: var(--color-muted-fg, #94a3b8);
  background: color-mix(in srgb, var(--schema-pill-color) 14%, transparent);
  border-color: color-mix(in srgb, var(--schema-pill-color) 35%, transparent);
  color: color-mix(in srgb, var(--schema-pill-color) 75%, var(--color-on-accent, #ffffff) 25%);
}

.schema-node__type {
  --schema-type-color: var(--color-primary, #4c82fb);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 4.25rem;
  padding: 0.2rem 0.55rem;
  border-radius: 999px;
  border: 1px solid color-mix(in srgb, var(--schema-type-color) 45%, transparent);
  background: color-mix(in srgb, var(--schema-type-color) 14%, transparent);
  color: color-mix(in srgb, var(--schema-type-color) 82%, var(--color-on-accent, #ffffff) 18%);
  font-size: 0.75rem;
  font-weight: 600;
  letter-spacing: 0.05em;
  text-transform: uppercase;
  margin-left: auto;
  flex-shrink: 0;
}

.schema-node__type--object {
  --schema-type-color: var(--color-green, #2f9e44);
}

.schema-node__type--array {
  --schema-type-color: var(--color-blue, #1c7ed6);
}

.schema-node__type--string {
  --schema-type-color: var(--color-primary, #4c82fb);
}

.schema-node__type--integer,
.schema-node__type--number {
  --schema-type-color: var(--color-yellow, #e67700);
}

.schema-node__type--boolean {
  --schema-type-color: var(--color-teal, #099268);
}

.schema-node__type--enum,
.schema-node__type--ref {
  --schema-type-color: var(--color-orange, #f08c00);
}

.schema-node__type--any,
.schema-node__type--unknown {
  --schema-type-color: var(--color-muted-fg, #94a3b8);
}

.schema-node__details[open] > summary.schema-node__row {
  border-bottom: 1px solid color-mix(in srgb, var(--color-border, #2f353d) 65%, transparent);
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  margin-bottom: 0.5rem;
}

.schema-node__details summary::-webkit-details-marker {
  display: none;
}

.schema-node__content {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  padding: 0.5rem 1rem 1rem;
}

.schema-node__enum ul,
.schema-node__examples ul {
  list-style: none;
  margin: 0.35rem 0 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.schema-node__children {
  list-style: none;
  margin: 0.5rem 0 0;
  padding: 0 0 0 1.25rem;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.schema-node__meta,
.schema-node__description,
.schema-node__empty {
  margin: 0;
  color: var(--color-muted-fg, color-mix(in srgb, currentColor 60%, transparent));
  font-size: 0.9rem;
}

.schema-node__reference {
  display: inline-flex;
  align-items: center;
  justify-content: flex-end;
}

.schema-node__link {
  font-weight: 600;
  text-decoration: none;
  color: var(--color-primary, #4c82fb);
}

.schema-node__link:hover {
  text-decoration: underline;
}
</style>
